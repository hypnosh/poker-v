{"version":3,"sources":["helpers/routing.js","services/firebase.js","helpers/auth.js","auth/signup.js","auth/login.js","components/tablelist.js","components/card.js","components/player.js","helpers/RTCModule.js","helpers/FirebaseModule.js","components/table.js","components/arena.js","App.js","serviceWorker.js","index.js"],"names":["PrivateRoute","Component","component","authenticated","rest","render","props","to","pathname","state","from","location","PublicRoute","app","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","db","firestore","svrfunctions","functions","signInWithGoogle","provider","GoogleAuthProvider","signInWithPopup","analytics","Signup","handleChange","event","setState","target","name","value","error","email","password","bind","handleSubmit","preventDefault","this","createUserWithEmailAndPassword","message","className","onSubmit","placeholder","type","onChange","Login","googleSignIn","signInWithEmailAndPassword","autoComplete","onClick","TableList","loading","user","tables","formDisplay","formData","tableName","blinds","players","pnl","logout","signOut","then","catch","console","log","createTableAction","createTable","startingStack","split","stack","player2","player3","player4","player5","player6","playerEmails","collection","add","docRef","alert","openTable","id","loadArena","closeForm","onAuthStateChanged","providerData","where","get","querySnapshot","forEach","doc","data","initStack","table","tablePlayers","length","tableBlinds","tableStack","push","document","title","displayName","map","index","key","TableListItem","itemClass","CreateTableForm","plyr","idx","clear","checked","Card","crd","suites","h","d","c","s","cardRank","cardSuite","cardClasses","Player","playerClass","seat","status","cardType","playerCard1","playerCard2","playerHand","playerName","playerStack","playerBet","undefined","handStrength","potSplit","ref","setVideoRef","autoPlay","playsInline","initiateLocalStream","a","navigator","mediaDevices","getUserMedia","video","audio","stream","initiateConnection","conn","RTCPeerConnection","iceServers","urls","sendAnswer","localStream","notif","doAnswer","database","username","addStream","offer","JSON","parse","setRemoteDescription","createAnswer","answer","setLocalDescription","doLogin","handleVideoUpdate","onSnapshot","snapshot","update","stringify","doCandidate","candidate","sitIn","fbfn","httpsCallable","Table","setLocalVideoRef","localVideoRef","setRemoteVideoRef","remoteVideoRef","localConnection","connectedUser","remoteUsername","onicecandidate","ontrack","e","srcObject","streams","listenToConnectionEvents","yourConn","startCall","addIceCandidate","RTCIceCandidate","addCandidate","takeSeat","position","dataset","tableID","result","callSize","reduce","prev","current","bet","foldAction","callAction","myBet","raiseAction","raiseFlag","playerID","handID","button","callButtonText","street","pot","hand","playerAction","flop","turn","river","React","createRef","history","replace","tableData","card","minBet","me","filter","player","thisPosition","playerNo","data-position","min","max","step","Arena","match","params","App","screen","loadTableList","componentDidMount","exact","path","Boolean","window","hostname","ReactDOM","StrictMode","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.efaa7392.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport {\n  Route,\n  BrowserRouter,\n  Switch,\n  Redirect,\n} from \"react-router-dom\";\n\nconst PrivateRoute = ({ component: Component, authenticated, ...rest }) => {\n  return (\n    <Route\n      {...rest}\n      render={(props) => authenticated === true\n        ? <Component {...props} />\n        : <Redirect to={{ pathname: '/login', state: { from: props.location } }} />}\n    />\n  )\n}\n\nconst PublicRoute = ({ component: Component, authenticated, ...rest }) => {\n  return (\n    <Route\n      {...rest}\n      render={(props) => authenticated === false\n        ? <Component {...props} />\n        : <Redirect to='/' />}\n    />\n  )\n}\n\nexport { PrivateRoute, PublicRoute };\n","import firebase from 'firebase';\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDcbcAIdtEhfO9jlEs2MsmhvWFc6SP-Qdg\",\n  authDomain: \"poker-video.firebaseapp.com\",\n  databaseURL: \"https://poker-video.firebaseio.com\",\n  projectId: \"poker-video\",\n  storageBucket: \"poker-video.appspot.com\",\n  messagingSenderId: \"551429593644\",\n  appId: \"1:551429593644:web:631702539d9c963bee0f89\",\n  measurementId: \"G-P6XY23X83B\"\n};\n// Initialize Firebase\nexport const app = firebase.initializeApp(firebaseConfig);\nexport const auth = firebase.auth;\nexport const db = firebase.firestore(app);\nexport const svrfunctions = firebase.functions();\nfirebase.analytics();\n","import { auth } from '../services/firebase';\n\nexport function signup(email, password) {\n  return auth().createUserWithEmailAndPassword(email, password);\n}\n \nexport function signin(email, password) {\n  return auth().signInWithEmailAndPassword(email, password);\n}\n\nexport function signInWithGoogle() {\n  const provider = new auth.GoogleAuthProvider();\n  return auth().signInWithPopup(provider);\n}\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { signup } from '../helpers/auth';\n\nclass Signup extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      email: '',\n      password: ''\n    }\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n  handleChange = (event) => {\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  }\n  async handleSubmit(event) {\n    event.preventDefault();\n    this.setState({ error: '' });\n    try {\n      await signup(this.state.email, this.state.password);\n    } catch(error) {\n      this.setState({ error: error.message });\n    }\n  }\n  render() {\n    return(\n      <div className=\"auth-forms\">\n        <h1 className=\"appname\">Poker with Friends</h1>\n        <form onSubmit={this.handleSubmit}>\n          <h3>Sign up</h3>\n          <input placeholder=\"Email\" name=\"email\" type=\"email\" className=\"fullw\"\n            onChange={this.handleChange}\n            value={this.state.email}\n          /><br/>\n          <input placeholder=\"Password\" name=\"password\" type=\"password\" className=\"fullw\"\n            onChange={this.handleChange}\n            value={this.state.password}\n          /><br/>\n          <p className=\"error\">\n            {this.state.error ? this.state.error: null}\n          </p>\n          <button type=\"submit\" className=\"btn btn-main\">Sign Up</button>\n          <hr/>\n          <p>Already have an account? <Link className=\"btn\" to=\"/login\">Login</Link></p>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default Signup;\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { signin, signInWithGoogle } from '../helpers/auth';\n\nclass Login extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      email: '',\n      password: ''\n    }\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.googleSignIn = this.googleSignIn.bind(this);\n  }\n  handleChange = (event) => {\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  }\n  async handleSubmit(event) {\n    event.preventDefault();\n    this.setState({ error: '' });\n    try {\n      await signin(this.state.email, this.state.password);\n    } catch(error) {\n      this.setState({ error: error.message });\n    }\n  }\n  async googleSignIn() {\n    try {\n      await signInWithGoogle();\n    } catch (error) {\n      this.setState({ error: error.message });\n    }\n  }\n  render() {\n    return(\n      <div className=\"auth-forms\">\n        <h1 className=\"appname\">Poker with Friends</h1>\n        <form autoComplete=\"off\" onSubmit={this.handleSubmit}>\n          <h3>Login</h3>\n          <input placeholder=\"Email\" name=\"email\" type=\"email\" className=\"fullw\"\n            onChange={this.handleChange}\n            value={this.state.email}\n          />\n          <br/>\n          <input placeholder=\"Password\" name=\"password\" type=\"password\" className=\"fullw\"\n            onChange={this.handleChange}\n            value={this.state.password}\n          />\n          <br/>\n          <p className=\"error\">\n            {this.state.error ? this.state.error: null}\n          </p>\n          <button\n            type=\"submit\"\n            className=\"btn btn-main\">Login</button> or <button\n            onClick={this.googleSignIn}\n            type=\"button\"\n            className=\"btn btn-secondary\">\n            Sign in with Google\n          </button>\n          <hr/>\n          <p>Do not have an account? <Link\n            className=\"btn\" to=\"/signup\">Sign Up</Link></p>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default Login;\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport {app, auth, db} from '../services/firebase';\n\nclass TableList extends Component {\n  state = {\n    loading: true,\n    user: {\n      email: \"amitksharma@gmail.com\"\n    },\n    tables: [\n\n    ],\n    formDisplay: false,\n    formData: {\n      tableName: \"\",\n      blinds: \"\",\n      players: [],\n      pnl: \"n\"\n    }\n  }\n  logout = () => {\n    auth().signOut()\n      .then(() => {\n        // success\n      })\n      .catch((error) => {\n        // error\n        console.log(\"Sign out error\", error);\n      });\n  }\n\n  createTableAction = () => {\n    this.setState({formDisplay: true});\n  }\n  createTable = (event) => {\n    // take inputs from the form and send to server to create a new table\n    event.preventDefault();\n    const [tableName, blinds, pnl] = [\n      event.target.tableName.value,\n      event.target.blinds.value,\n      event.target.pnl.value\n    ];\n    const startingStack = event.target.blinds.value.split(\"/\")[1] * 100;\n    const players = [\n      { email: this.state.user.email, stack: startingStack },\n      { email: event.target.player2.value, stack: startingStack },\n      { email: event.target.player3.value, stack: startingStack },\n      { email: event.target.player4.value, stack: startingStack },\n      { email: event.target.player5.value, stack: startingStack },\n      { email: event.target.player6.value, stack: startingStack },\n    ];\n    const playerEmails = [\n      this.state.user.email,\n      event.target.player2.value,\n      event.target.player3.value,\n      event.target.player4.value,\n      event.target.player5.value,\n      event.target.player6.value,\n    ];\n    console.log({tableName, blinds, players, pnl});\n\n    // create table in firestore\n    db.collection(\"tables\").add({\n      tableName: tableName,\n      blinds: blinds,\n      players: players,\n      playerEmails: playerEmails,\n      pnl: pnl\n    })\n    .then((docRef) => {\n      console.log(\"Table created\", docRef);\n      alert(\"Table created\");\n      this.setState({ formDisplay: false });\n    })\n    .catch((error) => {\n      console.log(\"Table creation error\", error);\n    });\n  }\n\n  openTable = (id) => {\n    // open the table which is clicked\n    this.props.loadArena(id);\n  }\n\n  closeForm = () => {\n    this.setState({formDisplay: false});\n  }\n\n  async componentDidMount() {\n    auth().onAuthStateChanged((user) => {\n      if (user) {\n        this.setState({\n          authenticated: true,\n          user: user.providerData[0],\n          loading: false\n        });\n      } else {\n        this.setState({\n          authenticated: false\n        });\n      }\n    });\n    let tables = [];\n    await db.collection(\"tables\")\n      .where(\"playerEmails\", \"array-contains\", this.state.user.email)\n      .get()\n      .then(querySnapshot => {\n        querySnapshot.forEach(doc => {\n          let blinds = doc.data().blinds;\n          let blindsArr = blinds.split(\"/\");\n          let initStack = blindsArr[1] * 100;\n          let table = {\n            id: doc.id,\n            tableName: doc.data().tableName,\n            tablePlayers: doc.data().players.length,\n            tableBlinds: blinds,\n            tableStack: initStack,\n          };\n          tables.push(table);\n        });\n        this.setState({ tables: tables });\n      })\n      .catch(error => console.log(\"Error in getting docs \", error));\n  }\n\n\n  render() {\n    document.title = \"Poker Experiments\";\n    return (\n      <div className=\"table-list-container\">\n        <h1 className=\"appname\">Poker with Friends</h1>\n        <h2 className={this.state.formDisplay ? \" fade\" : null }>{this.state.user.displayName}'s Tables</h2>\n        <button className={`btn btn-main ${this.state.formDisplay ? \" fade\" : null }`} onClick={this.createTableAction}>Create Table</button>\n        <button className=\"btn btn-sub\" onClick={this.logout}>Logout</button>\n\n        <div className={`table-list ${this.state.formDisplay ? \" fade\" : null }`}>\n          <TableListItem\n            type=\"header\"\n            tableName=\"Table\"\n            tablePlayers=\"#Plyrs\"\n            tableBlinds=\"Blinds\"\n            tableStack=\"Starting Stack\"\n            />\n          {this.state.tables.map((table, index) => {\n            return (<TableListItem\n              type=\"item\"\n              key={table.id}\n              id={table.id}\n              tableName={table.tableName}\n              tablePlayers={table.tablePlayers}\n              tableBlinds={table.tableBlinds}\n              tableStack={table.tableStack}\n              openTable={this.openTable}\n              />);\n          })}\n        </div>\n        {(this.state.formDisplay) ? <CreateTableForm\n          closeForm={this.closeForm}\n          createTable={this.createTable}\n          /> : null}\n      </div>\n    );\n  }\n}\n\nconst TableListItem = (props) => {\n  /* id, title, seatsnumber, blinds, stack */\n  const itemClass = \"table-list-\" + props.type;\n  return(\n    <Link to={props.id ? '/table/' + props.id : ''} className={itemClass} key={props.id}>\n      <span className=\"table-name\">{props.tableName}</span>\n      <span className=\"table-players\">{props.tablePlayers}</span>\n      <span className=\"table-blinds\">{props.tableBlinds}</span>\n      <span className=\"table-stack\">{props.tableStack}</span>\n    </Link>\n  );\n}\n\nconst CreateTableForm = (props) => {\n\n  const playersToInvite = [\n    'player2',\n    'player3',\n    'player4',\n    'player5',\n    'player6'\n  ];\n  return (\n    <form className=\"form-create-table\" onSubmit={props.createTable}>\n      <button className=\"closebtn\" onClick={props.closeForm}>&times;</button>\n      <h3>Create a Table</h3>\n\n        <label className=\"label\">Table Name</label><br/>\n        <input\n          type=\"text\"\n          className=\"fullw\"\n          name=\"tableName\"\n        />\n      <br/>\n\n        <label className=\"label\">Blinds</label><br />\n        <select name=\"blinds\" className=\"fullw\">\n          <option value=\"1/2\">1 / 2 (Opening Stack 200)</option>\n          <option value=\"2/5\">2 / 5 (Opening Stack 500)</option>\n          <option value=\"5/10\">5 / 10 (Opening Stack 1000)</option>\n          <option value=\"10/20\">10 / 20 (Opening Stack 2000)</option>\n          <option value=\"25/50\">25 / 50 (Opening Stack 5000)</option>\n          <option value=\"50/100\">50 / 100 (Opening Stack 10000)</option>\n        </select>\n      <br/>\n      <label className=\"label\">Invite your friends (up to 5)</label><br/>\n      {\n        playersToInvite.map((plyr, idx) => {\n          return (<input type=\"text\" name={plyr} className=\"playerToInvite\" placeholder=\"Email\" key={idx} />);\n        })\n      }\n      <br clear=\"all\" />\n      <label className=\"label\">Do you need a P&L account at the end of the game?</label><br/>\n        <label className=\"label-radio\"><input type=\"radio\" name=\"pnl\" value=\"Yes\" /> Yes</label>\n        <label className=\"label-radio\"><input type=\"radio\" name=\"pnl\" checked value=\"No\" /> No</label>\n      <br/><br/>\n      <button type=\"submit\" className=\"btn btn-main\">Create Table</button>\n    </form>\n  );\n}\n\nexport default TableList;\n","import React, { Component } from 'react';\nimport '../styles/card.css';\n\nconst Card = (props) => {\n  if (props.type !== \"hide\") {\n    let crd = props.name;\n\n    const suites = {\n      h: [\"hearts\", \"\\u2665\"],\n      d: [\"diams\", \"\\u2666\"],\n      c: [\"clubs\", \"\\u2663\"],\n      s: [\"spades\", \"\\u2660\"]\n    };\n    const [cardRank, cardSuite] = crd;\n    // let cardRank = crd[0];\n    // let cardSuite = crd[1];\n    const cardClasses = \"card pccard-\" + suites[cardSuite][0];\n    return(\n      <span className={cardClasses}>\n        <span className=\"pcrank\">{cardRank}</span>\n        <span className=\"pcsuite\">{suites[cardSuite][1]}</span>\n        <span className=\"pcsuite-large\">{suites[cardSuite][1]}</span>\n      </span>\n    );\n  } else {\n    return(\n      <span className=\"card pccard-hide\"></span>\n    )\n  }\n}\n\n\nexport default Card;\n","import React, { Component } from 'react';\nimport Card from './card';\n\nconst Player = (props) => {\n  const playerClass = \"player playerseat-\" + props.seat + \" player-\" + props.status;\n  let cardType = \"\";\n  let playerCard1 = \"\", playerCard2 = \"\";\n  if (props.playerHand === \"hide\") {\n    cardType = \"hide\";\n  } else {\n    cardType = \"show\";\n    playerCard1 = props.playerHand[0] + props.playerHand[1];\n    playerCard2 = props.playerHand[2] + props.playerHand[3];\n  }\n\n  return (\n    <div className={playerClass}>\n\t\t\t<div className=\"player-name\">{props.playerName}</div>\n      {\n        props.status !== \"playing\" ?\n          <div className=\"player-hand\"></div> :\n        <div className=\"player-hand\">\n          <Card type={cardType} name={playerCard1} />\n          <Card type={cardType} name={playerCard2} />\n        </div>\n      }\n\t\t\t<div className=\"player-stack\">{props.playerStack}</div>\n\t\t\t<div className=\"player-bet\">{props.playerBet}</div>\n      {props.handStrength !== undefined ?\n          <div className=\"hand-strength\">{props.handStrength}, {props.potSplit}%</div>\n        : null }\n      <video\n        key={props.key}\n        ref={props.setVideoRef}\n        className=\"player-video\"\n        autoPlay={true}\n        playsInline\n        />\n\t\t</div>\n  );\n}\n\nconst EmptySeat = (props) => {\n  return (\n    <p>Come sit here</p>\n  );\n}\nexport default Player;\n","\nexport const createOffer = async (connection, localStream, userToCall, doOffer, database, username) => {\n  try {\n    connection.addStream(localStream)\n\n    const offer = await connection.createOffer()\n    await connection.setLocalDescription(offer)\n\n    doOffer(userToCall, offer, database, username)\n  } catch (exception) {\n    console.error(exception)\n  }\n}\n\nexport const initiateLocalStream = async () => {\n  try {\n    const stream = await navigator.mediaDevices.getUserMedia({\n      video: true,\n      audio: true\n    })\n    return stream\n  } catch (exception) {\n    console.error(exception)\n  }\n}\nexport const initiateConnection = async () => {\n  try {\n    // using Google public stun server\n    var configuration = {\n      iceServers: [{ urls: 'stun:stun2.1.google.com:19302' }]\n    }\n\n    const conn = new RTCPeerConnection(configuration)\n\n    return conn\n  } catch (exception) {\n    console.error(exception)\n  }\n}\n\nexport const listenToConnectionEvents = (conn, username, remoteUsername, database, remoteVideoRef, doCandidate) => {\n  conn.onicecandidate = function (event) {\n    if (event.candidate) {\n      doCandidate(remoteUsername, event.candidate, database, username)\n    }\n  }\n\n  // when a remote user adds stream to the peer connection, we display it\n  conn.ontrack = function (e) {\n    if (remoteVideoRef.srcObject !== e.streams[0]) {\n      remoteVideoRef.srcObject = e.streams[0]\n    }\n  }\n}\n\nexport const sendAnswer = async (conn, localStream, notif, doAnswer, database, username) => {\n  try {\n    conn.addStream(localStream)\n\n    const offer = JSON.parse(notif.offer)\n    conn.setRemoteDescription(offer)\n\n    // create an answer to an offer\n    const answer = await conn.createAnswer()\n    conn.setLocalDescription(answer)\n\n    doAnswer(notif.from, answer, database, username)\n  } catch (exception) {\n    console.error(exception)\n  }\n}\n\nexport const startCall = (yourConn, notif) => {\n  const answer = JSON.parse(notif.answer)\n  yourConn.setRemoteDescription(answer)\n}\n\nexport const addCandidate = (yourConn, notif) => {\n  // apply the new received candidate to the connection\n  const candidate = JSON.parse(notif.candidate)\n  yourConn.addIceCandidate(new RTCIceCandidate(candidate))\n}\n","\nexport const doLogin = async (table, database, handleVideoUpdate) => {\n  // await database.collection('video').doc(table).remove()\n  database.collection('video').doc(table).onSnapshot(snapshot => {\n    handleVideoUpdate(snapshot.data(), table)\n  });\n}\n\nexport const doOffer = async (table, offer, database, username) => {\n  await database.ref('/video/' + table).set({\n    type: 'offer',\n    from: username,\n    offer: JSON.stringify(offer)\n  })\n}\n\nexport const doAnswer = async (table, answer, database, username) => {\n  await database.ref('/video/' + table).update({\n    type: 'answer',\n    from: username,\n    answer: JSON.stringify(answer)\n  })\n}\n\nexport const doLeaveNotif = async (table, database, username) => {\n  await database.ref('/video/' + table).update({\n    type: 'leave',\n    from: username\n  })\n}\n\nexport const doCandidate = async (table, candidate, database, username) => {\n  // send the new candiate to the peer\n  await database.ref('/video/' + table).update({\n    type: 'candidate',\n    from: username,\n    candidate: JSON.stringify(candidate)\n  })\n}\n","import React, { Component } from 'react';\nimport Player from './player';\nimport Card from './card';\nimport { app, auth, db, svrfunctions as fbfn } from '../services/firebase';\nimport { createOffer, initiateConnection, startCall, sendAnswer, addCandidate, initiateLocalStream, listenToConnectionEvents } from '../helpers/RTCModule'\nimport { doOffer, doAnswer, doLogin, doCandidate } from '../helpers/FirebaseModule'\nimport '../styles/game.css';\n\nconst sitIn = fbfn.httpsCallable('SitIn');\n\nclass Table extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      authenticated: false,\n      tableID: this.props.id,\n      playerID: 1, /* this.props.user */\n      handID: 0,\n      blinds: [],\n      button: 5,\n      callButtonText: \"Check\",\n      street: \"turn\",\n      pot: 50000,\n      players: [\n        {\n          idx: 1, name: \"Amit\", email: \"amitksharma@gmail.com\", stack: 8000, bet: 80,\n          position: 1, status: \"playing\",\n          hand: \"AhKc\", handStrength: \"Straight A-T\", potSplit: 100\n        },\n        {\n          idx: 2, name: \"Pratik\", email: \"pratad@gmail.com\", stack: 8000, bet: 90,\n          position: 3, status: \"playing\"\n        },\n        {\n          idx: 3, name: \"Saumitra\", stack: 8000, bet: 70,\n          status: \"sittingout\",\n\n        },\n        {\n          idx: 4, name: \"Saurabh\", stack: 8000, bet: 100,\n          status: \"playing\",\n\n        },\n        {\n          idx: 5, name: \"Premi\", stack: 8000, bet: 120,\n\n\n        },\n        {\n          idx: 6, name: \"Manish\", stack: 8000, bet: 60,\n\n        }\n      ],\n      playerAction: 1,\n      flop: [\"3h\", \"7s\", \"Qc\"],\n      turn: \"Jd\",\n      river: \"Td\",\n      raiseFlag: false,\n    }\n    this.takeSeat = this.takeSeat.bind(this);\n    this.callSize = this.callSize.bind(this);\n    this.foldAction = this.foldAction.bind(this);\n    this.callAction = this.callAction.bind(this);\n    this.raiseAction = this.raiseAction.bind(this);\n\n    this.localVideoRef = React.createRef()\n    this.remoteVideoRef = React.createRef()\n  }\n\n  async componentDidMount() {\n    // get user's details\n    auth().onAuthStateChanged((user) => {\n      if (user) {\n        this.setState({\n          authenticated: true,\n          user: user.providerData[0]\n        });\n      } else {\n        this.setState({\n          authenticated: false\n        });\n        this.props.history.replace('/login');\n      }\n    });\n    // get table details - ID from props\n    // get hand details - ID from table record - listen\n    // get bids - listen\n    // console.log(this.state.tableID);\n    try {\n      let querySnapshot = await db.collection(\"tables\").doc(this.state.tableID).get();\n      let tableData = querySnapshot.data();\n      console.log(tableData);\n    } catch(error) {\n      console.log(\"Error in getting table \", error);\n    }\n\n    const localStream = await initiateLocalStream();\n    this.localVideoRef.srcObject = localStream;\n\n    const localConnection = await initiateConnection();\n    await doLogin(this.props.id, db, this.handleVideoUpdate);\n\n    this.setState({\n      localStream,\n      localConnection\n    });\n  }\n\n  setLocalVideoRef = ref => {\n    this.localVideoRef = ref\n  }\n\n  setRemoteVideoRef = ref => {\n    this.remoteVideoRef = ref\n  }\n\n  handleVideoUpdate = (notif, username) => {\n    const { localConnection, database, localStream } = this.state\n\n    if (notif) {\n      switch (notif.type) {\n        case 'offer':\n          this.setState({\n            connectedUser: notif.from\n          })\n\n          listenToConnectionEvents(localConnection, username, notif.from, database, this.remoteVideoRef, doCandidate)\n\n          sendAnswer(localConnection, localStream, notif, doAnswer, database, username)\n          break\n        case 'answer':\n\n          this.setState({\n            connectedUser: notif.from\n          })\n          startCall(localConnection, notif)\n          break\n        case 'candidate':\n          addCandidate(localConnection, notif)\n          break\n        default:\n          break\n      }\n    }\n  }\n\n  takeSeat = (event) => {\n    const position = event.target.dataset.position;\n    if (navigator.mediaDevices.getUserMedia) {\n\t    navigator.mediaDevices.getUserMedia({\n\t      video: true,\n\t      audio: true\n\t    }).then(function(stream) {\n\t      this.setState({\n\n        });\n\t    }).catch(function(error) {\n\t      console.log(\"Error\", error);\n\t    });\n\t  }\n    sitIn({\n      tableID: this.state.tableID,\n      email: this.state.user.email,\n      position: position\n    })\n      .then(result => {\n        console.log(\"SitIn -----\");\n        console.log(result);\n        console.log(result.data);\n      })\n      .catch(error => {\n        console.log(\"SitIn error ----\");\n        console.log(error);\n      });\n  }\n\n  callSize = () => {\n    // figure out what the minimum bet or call size can be\n    let players = [... this.state.players];\n    let highestBidder = players.reduce((prev, current) => {\n      return (prev.bet > current.bet) ? prev: current;\n    });\n    return highestBidder.bet;\n  }\n  foldAction = () => {\n    // send fold action - fold()\n  }\n  callAction = () => {\n    // send check or call action - bet(0) or bet(call)\n    this.setState({myBet: this.callSize()});\n  }\n  raiseAction = () => {\n    if (this.state.raiseFlag) {\n      // read the raise amount and call the function - bet(raise)\n      const myBet = this.state.myBet;\n\n      this.setState({raiseFlag: false});\n\n    } else {\n      this.setState({raiseFlag: true});\n    }\n  }\n\n  render() {\n    let flop = (\n      <span className=\"flop\">\n        {this.state.flop.map((card, index) => {\n          return(\n            <Card type=\"shown\" name={card} key={index} />\n          );\n        })}\n      </span>\n    );\n    let turn = (\n      <span className=\"turn\">\n        <Card type=\"shown\" name={this.state.turn} />\n      </span>\n    );\n    let river = (\n      <span className=\"river\">\n        <Card type=\"shown\" name={this.state.river} />\n      </span>\n    );\n    switch (this.state.street) {\n      case \"flop\":\n        turn = \"\";\n        river = \"\";\n        break;\n      case \"turn\":\n        river = \"\";\n        break;\n      case \"river\":\n        break;\n      default:\n    }\n\n    // figure out bet size\n\n    let minBet = this.callSize();\n    let callButtonText = (minBet == 0) ? \"Check\" : \"Call (\" + minBet + \")\";\n    let me = this.state.players.filter(player => {\n      return (player.idx == this.state.playerID);\n    })[0];\n\n    // change window title to table details\n    document.title = `Table # ${this.state.tableID} | ${this.state.blinds[0]}/${this.state.blinds[1]}` ;\n\n    return (\n      <div className=\"table\">\n        <div className=\"players\">\n          {this.state.players.map((player, index) => {\n            const playerHand = (player.hand) ? player.hand : \"hide\";\n            if (player.position && player.status) {\n              // figure out where to place each player on this client's screen\n              let thisPosition = player.position;\n              if (me.position) {\n                thisPosition = player.position - me.position + 1;\n                thisPosition = (thisPosition < 1) ? thisPosition + 6 : thisPosition;\n                // console.log({player: player.name, thisPosition: thisPosition, playerPosition: player.position, mePosition: me.position});\n                // console.log(\"ss\");\n              }\n\n              return(\n                <Player\n                  key={player.idx}\n                  playerNo={player.idx}\n                  playerName={player.name}\n                  playerStack={player.stack}\n                  playerBet={player.bet}\n                  playerHand={playerHand}\n                  seat={thisPosition}\n                  handStrength={player.handStrength}\n                  potSplit={player.potSplit}\n                  status={player.status}\n                  setVideoRef={ thisPosition == 1 ? this.setLocalVideoRef : this.setRemoteVideoRef }\n                />);\n            } else {\n              if (!me.position) {\n                return (\n                  <div\n                    key={player.idx}\n                    className={`sit-here-button player-` + player.idx}\n                    >\n                    <button\n                      onClick={this.takeSeat}\n                      data-position={player.idx}>\n                      Sit here\n                    </button>\n                  </div>\n                );\n              }\n            }\n            })}\n        </div>\n        <span className={`dealer dealer-${this.state.button}`}>D</span>\n        <div className=\"felt\">\n          {flop} {turn} {river}\n        </div>\n        <div className=\"pot\">\n          {this.state.pot}\n        </div>\n        {((this.state.playerID == this.state.playerAction)) ?\n          <div className=\"buttons\">\n            <button onClick={this.foldAction}\n              className=\"btn action-button action-fold\">Fold</button>\n            <button onClick={this.callAction}\n              className=\"btn action-button action-call\">{callButtonText}</button>\n            <button onClick={this.raiseAction}\n              className=\"btn action-button action-raise\">Raise {this.state.myBet}</button>\n            {(this.state.raiseFlag) ?\n              <span className=\"raising-slider\">\n                <input\n                  type=\"range\"\n                  className=\"slider\"\n                  min={minBet + this.state.blinds[0]}\n                  max={me.stack}\n                  step={this.state.blinds[0]}\n                  value={this.state.myBet ? this.state.myBet : minBet + this.state.blinds[0]}\n                  onChange={(event) => {\n                  this.setState({myBet: event.target.value});\n                }} />\n              </span>\n              : null}\n          </div>\n          : null }\n      </div>\n    );\n  }\n}\n\nexport default Table;\n","import React, { Component } from 'react';\nimport Table from './table';\nimport { Link } from 'react-router-dom';\n\nconst Arena = (props) => {\n  return(\n    <div className=\"arena\">\n      <header className=\"toolbar\">\n      \t<nav>\n          {/* <Link className=\"goback\" to={tableList}>&#x2039;</Link> */}\n      \t\t<Link to=\"/\" className=\"goback\">&#x2039;</Link>\n      \t</nav>\n      </header>\n      <Table id={props.match.params.id} history={props.history} />\n    </div>\n  );\n}\n\nexport default Arena;\n","import React, { Component, Suspense } from 'react';\nimport {\n  Route,\n  BrowserRouter,\n  Switch,\n  Redirect,\n} from \"react-router-dom\";\nimport { PrivateRoute, PublicRoute } from './helpers/routing';\nimport Signup from './auth/signup';\nimport Login from './auth/login';\n\nimport TableList from './components/tablelist';\nimport './styles/main.css';\nimport {app, auth, db} from './services/firebase';\n\n// const Arena = React.lazy(() => import('./components/arena'));\nimport Arena from './components/arena';\n/* Lazy load Arena/Table */\n\nclass App extends Component {\n  state = {\n    user: {},\n    authenticated: true,\n    screen: \"tablelist\",\n  }\n  loadTableList = () => {\n    this.setState({screen: \"tablelist\"});\n  }\n  loadArena = (id) => {\n    console.log(id);\n    this.setState({\n      screen: \"arena\",\n      tableID: id\n    });\n  }\n  componentDidMount = () => {\n    auth().onAuthStateChanged((user) => {\n      if (user) {\n        this.setState({\n          authenticated: true,\n          user: user.providerData[0]\n        });\n      } else {\n        this.setState({\n          authenticated: false\n        });\n      }\n    });\n  }\n  render() {\n\n    // let AppScreen;\n    // switch(this.state.screen) {\n    //   case \"tablelist\":\n    //     AppScreen = (\n    //       <TableList\n    //         user={this.state.user}\n    //         loadArena={this.loadArena.bind(this)}\n    //       />\n    //     );\n    //   break;\n    //   case \"arena\":\n    //     AppScreen = (\n    //       <Arena\n    //         goback={this.loadTableList}\n    //         tableID={this.state.tableID}\n    //         user={this.state.user}\n    //         />\n    //     );\n    //   break;\n    //\n    // }\n    return (\n      <BrowserRouter>\n        <Switch>\n          <PrivateRoute exact\n            path=\"/\" component={TableList} authenticated={this.state.authenticated} />\n          <PrivateRoute\n            path=\"/table/:id\" component={Arena} authenticated={this.state.authenticated} />\n          <PublicRoute\n            path=\"/signup\" component={Signup} authenticated={this.state.authenticated} />\n          <PublicRoute\n            path=\"/login\" component={Login} authenticated={this.state.authenticated} />\n          <Route\n            render={() => <h1>Not Found</h1>} />\n        </Switch>\n        {/* AppScreen */}\n      </BrowserRouter>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}